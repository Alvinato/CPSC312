{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red223\green221\blue221;\red255\green255\blue255;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl358\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Your report is a separate doc or pdf file which should include a section for each of the\
questions under the \'93Main Project\'94. In each section, give a brief overview (one or two\
paragraphs) of how you implemented the requirements of that section. This should include\
which part in the original code you modified, and an overview of the implementation,\
including how the various predicates you\'92ve written interact with each other to achieve the\
results. You can use examples to clarify your explanation. You can document your\
program\'92s behaviour by explaining a few common use cases or scenarios, or explain it in\
abstract terms. Anyway, explain it however you understand it and explain it as clear as you\
can and as brief as possible. Keep it under 10 pages.\
If your code has any shortcomings, such as, known scenarios that don\'92t work, known\
inefficiencies, etc. include them as well as why you think that\'92s happening or what you\'92ve\
done to fix it or any other relevant information that can prove your understanding of the\
issue.\
\cb4 \
\
1.) The domain describes 8 planets in our solar system.  The planets are mainly divided by the condition of either outer or inner planets - 4 are inner and 4 are outer. Then each planet is defined by colour, size, atmosphere, relative distance to the sun and other unique attributes.\
\
Initially it was difficult to understand the syntax which the parser read the rules.  Further down the line it was also difficult to categorize the different planets, finding unique characteristics but also universal characteristics for some planets.\
\
\
\
2.)   The code behaves exactly like the example provided in the question and the bonus part was completed as the interpreters quit command has been implemented.\
\
The interpreter is prompted with the keyword \'91main\'92 this prompts a user message which provides all available commands - load, solve, help, list, assert, goal, prove and quit. \
\
The load function is initialized when the user types \'91load.\'92,  a user message will appear asking for the user to insert the filename in double quotes.  The user can insert a file name, say for example \'93planets.kb\'94, once inserted all rules that were understood will be printed out. \
\
Once loaded the solve function can be called through typing \'93solve\'94.  The program will then ask a series of questions and find the domain that is trying to be found. \
\
Typing the quit command will exit the interpreter.\
\
\
\
\
3.)  the goal is able to be specified once you have entered the interpreter by typing \'91main.\'92 then \'91goal.\'92  the interpreter will prompt the message \'91enter a new goal, followed by a period\'92.\
\
 After this the goal can be typed and submitted with a period at the end.  All examples given in the question will run properly.  \
\
To take a look at the output that is asserted to db use the list function in the interpreter, the goal will be the last one printed. \
\
The logic begins at process3 where it is invoked at line 112.  The predicate accepts the sentence that was just inputted by the user. \
\
Within the predicate the sentence that was inputted by the user is parsed with goal_sentence/4 predicate.  The predicate variables N and V that are outputted are used in add_list/4 which form the correct attribute syntax for the assertz/ function on line 535.  Furthermore this predicate deletes all current goals before asserting the new one that was just created by the user on line 531, with the forall predicate.\
\
The bonus was completed in this portion as well as when the user types \'91what the heck is that\'92 the default \'91what is it\'92 top goal is set.\
\
4.) This question was explained as part of question 3. \
\
\
5.)   The assert function starts on line 121 in the predicate process2.  The predicate calls the predicate \'91process\'92 on line 476, an existing predicate prewritten in the assignment.  The predicate given then parses the rule or fact that is inputted by the user and asserts it to the database. \
\
\
\
\
	\
\pard\pardeftab720\sl280\partightenfactor0

\f1\fs24 \cf2 \cb1 \
\pard\pardeftab720\sl358\partightenfactor0

\f0\fs28 \cf2 \cb4 \
\
}